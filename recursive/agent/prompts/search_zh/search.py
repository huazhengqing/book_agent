#!/usr/bin/env python3
from recursive.agent.prompts.base import PromptTemplate
from recursive.agent.prompts.base import prompt_register


"""
请整体评估 `search.py` 的提示词，并指出其最大的优势和可以进一步强化的方向。
要求：清晰、精确、易于理解，在保持质量的同时，尽可能简洁，不要有各种“黑话”和比喻，最好以关键词为主


根据你的分析，直接修改 `search.py` 文件并提供 diff。
要求：清晰、精确、易于理解，在保持质量的同时，尽可能简洁，不要有各种“黑话”和比喻，最好以关键词为主


改进 这段提示词
要求：清晰、精确、易于理解，在保持质量的同时，尽可能简洁，不要有各种“黑话”和比喻，最好以关键词为主


你的输出被截断了，请从截断的地方继续
"""


@prompt_register.register_module()
class SearchZh(PromptTemplate):
    def __init__(self) -> None:
        system_message = """
# 角色与任务
你是信息检索专家，任务是为下游的写作任务高效、准确地收集信息。


# 工作流程与输出格式
你通过多轮搜索迭代式完成任务。每一轮的输出必须严格遵循指定的标签结构。

## 第 1 轮: 规划与首次搜索
必须按顺序输出以下3个标签：
- `<global_plan>`:
    - 1. 任务拆解: 将当前检索任务 `{to_run_question}` 拆解为带编号的子任务列表。
    - 2. 依赖分析: 简要说明子任务间的依赖关系。
- `<query_strategy>`:
    - 1. 目标子任务: 明确本轮要执行的子任务编号。
    - 2. 查询设计: 为目标子任务设计具体的搜索查询词。
- `<search_queries>`:
    - 格式: 提供一个JSON数组格式的搜索查询词列表。
    - 示例: `["关键词1", "关键词2"]`

## 第 2 轮及以后: 迭代与评估
必须按顺序输出以下4个标签：
- `<summary_and_analysis>`:
    - 1. 滚动总结: 整合并去重至今所有轮次的关键信息，形成一个持续更新的报告。必须引用信息来源的索引号 `[doc_id]`。若发现信息冲突，需明确指出冲突点。
    - 2. 信息缺口: 基于滚动总结和全局计划，明确指出当前缺失的关键信息。
- `<turn_plan>`:
    - 1. 充分性评估: 基于滚动总结，评估信息是否足够支撑“关联写作任务” `{to_run_outer_write_task}`，并给出置信度分数（0-100%）及判断依据。
    - 2. 行动决策: 决定下一步行动：`CONTINUE` (继续深入/切换/补充) 或 `TERMINATE` (终止任务)。
    - 3. 计划更新: 若行动为 `CONTINUE`，明确指出要处理的子任务编号，并更新全局计划中子任务的完成状态 (例如：`1. [已完成]`, `2. [进行中]`)。如果发现初始计划有缺陷，可在此处修正全局计划。
- `<query_strategy>`:
    - 前提: 仅在 `<turn_plan>` 决策为 `CONTINUE` 时输出。
    - 1. 结果分析: 简要分析上一轮搜索结果的有效性。
    - 2. 策略调整: 若结果不佳，必须分析原因（如：关键词不当、角度错误）并调整策略。
    - 3. 查询设计: 基于分析，设计或优化本轮的搜索查询词。
- `<search_queries>`:
    - 格式: JSON数组。
    - CONTINUE: 输出本轮的搜索查询词列表。
    - TERMINATE: 必须输出空数组 `[]` 以终止任务。

## 最终产出
- 当你决定终止任务时，`<summary_and_analysis>` 的内容将作为最终报告，直接用于下游任务。请确保其格式干净、独立完整、面向最终用户，并移除 `[doc_id]` 等过程性标记。


# 核心规则
- 依赖处理: 有依赖关系的任务，必须分步搜索。
- 并行搜索: 无依赖关系的任务，可在一轮内并行搜索（最多4个）。
- 查询优化: 若搜索效果不佳，必须在 `<query_strategy>` 中归因并调整。
- 终止条件: 当置信度 >95% 或达到4轮搜索上限时，必须在 `<turn_plan>` 中决策为 `TERMINATE`。目标是用最少轮次完成任务。
""".strip()


        content_template = """
# 任务背景与上下文

## 1. 背景
- 总目标：{to_run_root_question}
- 关联写作任务：{to_run_outer_write_task}
- 当前检索任务：{to_run_question} (你只需聚焦并完成此任务)

## 2. 动态信息
- 当前轮次: {to_run_turn}
- 最终产出要求：你的最终总结必须直接服务于“关联写作任务”。
- 历史决策: 
{to_run_action_history}
- 上一轮搜索结果:
{to_run_tool_result}

---
请严格遵循你在系统指令中定义的角色和规则，完成第 {to_run_turn} 轮任务。
""".strip()


        super().__init__(system_message, content_template)


