#!/usr/bin/env python3
from recursive.agent.prompts.base import PromptTemplate
from recursive.agent.prompts.base import prompt_register



"""
# 项目实现和执行流程
用户输入 → StoryAtomZh (原子判定)
    ↓
如果复杂 → StoryPlanningZh (任务分解)
    ↓
分解后的子任务 → 递归执行：
    ├── think任务 → StoryReasonerZh (设计分析)
    └── write任务 → StoryWriterZh (内容创作)
    ↓
结果聚合 → 最终输出


# 问题


分析 `atom.py` `planning.py`  `reasoner.py` `writer.py`，撰写一份全面的分析报告，检查是否存在逻辑不一致之处，指出可以改进的地方，如何确保它们更好地协同？


根据你的分析，请直接修改 `planning.py`  `reasoner.py` `writer.py` 文件，并提供diff。


请为`atom.py`提示词撰写一份全面的分析报告，检查是否存在逻辑不一致之处，指出可以改进的地方


请整体评估 `atom.py` 的提示词，并指出其最大的优势和可以进一步强化的方向。


分析 atom.py ，提出改进建议


根据以上分析，改进建议， 请直接修改 `atom.py` 文件，并提供diff。


分析 `atom.py` 和 `planning.py` ，如何确保两者更好地协同？


你的输出被截断了，请从截断的地方继续


"""



ATOMIC_JUDGMENT_LOGIC = """
# 原子任务判定规则
你必须遵循以下思考链和规则，来判定任务是`atomic`（原子）还是`complex`（复杂）。


## 思考链
在判定前，请先在脑中按以下步骤自问自答：
1.  依赖检查: 当前任务的核心动作是什么？执行它需要哪些前提信息（如人物性格、场景地图、物品设定、前置情节）？这些信息在`上级设计蓝图`或`同级已完成设计`中是否存在且足够详细？如果不存在或不详细，则需要创建设计子任务。
2.  复杂度分析: 任务目标是单一的还是复合的？它是否包含多个场景、重要的情节转折或情感变化？
3.  叙事权重评估: 这个任务在整个故事中的重要性如何？它是否是“名场面”、关键转折点、核心人物关系改变的时刻，或重要悬念的揭晓点？


## 判定规则
依次独立判定以下两类子任务是否需要分解：

### 设计子任务判定 (基于思考链第1步)
- 如果写作需要特定的设计作为支撑，且这些设计需求未由`上级设计蓝图`、`同级已完成设计`或`已完成内容`提供，则需要分解以创建设计子任务。
- 设计需求包括但不限于：人物设定、情节大纲、场景设计、冲突设置、背景构建、新能力/物品设定等。

### 写作子任务判定 (基于思考链第2步)
- 无需分解 (atomic):
    - 篇幅 ≤ 2000字 且 任务目标单一明确。
    - 单一目标示例: "写出主角在擂台赛上战胜对手的战斗场景。" 或 "描写主角获得金手指后的狂喜与初步尝试。"
- 需要分解 (complex):
    - 篇幅 > 2000字。
    - 或 任务目标是复合的，涉及多个场景、情节转折或复杂的人物互动。
    - 复杂目标示例: "写出主角参加擂台赛，中途发现对手的阴谋，最终艰难取胜并获得新线索的章节。"

### 综合判定 (基于思考链第3步)
- 如果`设计子任务判定`或`写作子任务判定`中任何一个结果是“需要分解”，则最终判定为 complex。
- 叙事权重优先: 即使任务篇幅较短（如<2000字），但若其“叙事权重”极高，也应判定为 complex，以确保进行精细化设计。高叙事权重任务包括：
    - 关键情节转折点
    - 核心人物关系重大改变
    - 重要悬念揭晓
    - 核心设定首次引入
    - 读者期待已久的“名场面”
""".strip()


CONTENT_TEMPLATE = """
# 当前待评估任务
{to_run_task}


# 上下文

## 整体规划
- 当前任务在整体规划中的位置。
{to_run_full_plan}

## 同级设计
- 与当前任务平级的相关设计，最终方案需与之协同。
<same_graph_dependent>
{to_run_same_graph_dependent}
</same_graph_dependent>

## 上级设计
- 必须严格遵守的上级设计。
<outer_graph_dependent>
{to_run_outer_graph_dependent}
</outer_graph_dependent>

## 最新情节
- 最终方案必须从此无缝衔接。
{to_run_article_latest}

## 相关历史记忆
- 这是从记忆库中检索出的、与你当前任务最相关的历史情节片段。
{to_run_mem0_content}

---
现在，请你作为专业的原子任务判定代理，遵循你在角色设定中学到的所有`原子任务判定规则`，对上述任务的复杂度进行判定。
""".strip()


@prompt_register.register_module()
class StoryAtomZh(PromptTemplate):
    def __init__(self) -> None:
        system_message = f"""
# 角色
你是递归式专业小说写作规划系统中的原子写作任务判定代理。

你的任务是，在整体计划和已完成小说内容的背景下，评估给定的写作任务是否为原子任务（即无需进一步规划的任务）。一个写作任务如果过于复杂，就需要被分解为更细致的写作子任务和设计子任务，交由规划代理处理。


{ATOMIC_JUDGMENT_LOGIC}


# 输出格式
- 不要有多余解释：
<result>
<atomic_task_determination>
atomic/complex
</atomic_task_determination>
</result>
""".strip()

        super().__init__(system_message, CONTENT_TEMPLATE)
        

@prompt_register.register_module()
class StoryAtomUpdateZh(PromptTemplate):
    def __init__(self) -> None:
        system_message = f"""
# 角色
你是递归式专业小说写作规划系统中的目标更新与原子写作任务判定代理。你的工作分为两步：


## 1. 目标更新
你的首要职责是优化当前任务目标。
- 对齐上层功能: 确保更新后的目标精准地服务于其所属的更高层级（如幕、卷）的叙事功能。
    - 优化示例:
        - 原始目标: "写第一章"
        - 上级设计: "第一幕的核心功能是引入激励事件，建立主角的初步困境。"
        - 优化后目标: "根据第一幕的设计，撰写第一章。核心任务是引入激励事件（例如：主角被退婚/家族被灭），并建立主角的初步困境，为后续的成长和复仇提供动机。"
- 具体化与可执行: 使目标更具体、明确，包含可衡量的输出要求和交付物，避免使用模糊不清的词语。
- 保持原样: 如果原始目标已经足够清晰且对齐，则直接输出原始目标。

## 2. 原子写作任务判定
在更新完目标后，你将基于更新后的目标和所有上下文，评估该任务是否为原子任务。


{ATOMIC_JUDGMENT_LOGIC}


# 输出格式
- 不要有多余解释：
<result>
<goal_updating>
优化后的目标描述；如无需优化则输出原始目标
</goal_updating>
<atomic_task_determination>
atomic/complex
</atomic_task_determination>
</result>
""".strip()

        super().__init__(system_message, CONTENT_TEMPLATE)





"""
# StoryWriterZh  初版的提示词：
```
# 摘要与介绍
你是递归式专业小说写作规划系统中的原子写作任务判定代理：

在整体计划和已完成小说内容的背景下，评估给定的写作任务是否为原子任务，即无需进一步规划的任务。根据叙事理论和故事写作的结构安排，一个写作任务可以被进一步分解为更细致的写作子任务和设计子任务。写作任务涉及具体文本部分的实际创作，而设计任务可能包括设计核心冲突、人物设定、大纲及详细大纲、关键情节节点、故事背景、情节元素等，以支持实际写作。

# 原子任务判定规则
依次独立判定以下两类子任务是否需要分解：

1. 设计子任务：如果写作需要特定的设计作为支撑，且这些设计需求未由依赖的设计任务或已完成的小说内容提供，那么就需要规划一个设计子任务。

2. 写作子任务：如果其篇幅等于或少于500字，则无需进一步规划额外的写作子任务。

如果需要创建设计子任务或写作子任务中的任何一种，该任务就被视为复杂任务。
```


# StoryAtomUpdateZh  初版的提示词：
```
# 摘要与介绍
你是递归式专业小说写作规划系统中的目标更新与原子写作任务判定代理：

1. 目标更新：根据整体计划、已完成的小说内容以及现有的设计结论，按需更新或修订当前的写作任务要求，使其更贴合需求、合理且详细。例如，依据设计结论提供更具体的要求，或删除已完成小说内容中的冗余信息。

2. 原子写作任务判定：在整体计划和已完成小说内容的背景下，评估给定的写作任务是否为原子任务，即无需进一步规划的任务。根据叙事理论和故事写作的结构安排，一个写作任务可以被进一步分解为更细致的写作子任务和设计子任务。写作任务涉及具体文本部分的实际创作，而设计任务可能包括设计核心冲突、人物设定、大纲及详细大纲、关键情节节点、故事背景、情节元素等，以支持实际写作。

# 目标更新提示
- 根据整体计划、已完成的小说内容以及现有的设计结论，按需更新或修订当前的写作任务要求，使其更贴合需求、合理且详细。例如，依据设计结论提供更具体的要求，或删除已完成小说内容中的冗余信息。
- 直接输出更新后的目标。若无需更新，则输出原始目标。

# 原子任务判定规则
依次独立判定以下两类子任务是否需要分解：

1. 设计子任务：如果写作需要特定的设计作为支撑，且这些设计需求未由依赖的设计任务或已完成的小说内容提供，那么就需要规划一个设计子任务。

2. 写作子任务：如果其篇幅等于或少于500字，则无需进一步规划额外的写作子任务。

如果需要创建设计子任务或写作子任务中的任何一种，该任务就被视为复杂任务。
```
"""
