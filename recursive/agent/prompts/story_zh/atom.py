#!/usr/bin/env python3
from recursive.agent.prompts.base import PromptTemplate
from recursive.agent.prompts.base import prompt_register


"""
请整体评估 `atom.py` 的提示词，并指出其最大的优势和可以进一步强化的方向。
要求：清晰、精确、易于理解，在保持质量的同时，尽可能简洁，不要有各种“黑话”和比喻，最好以关键词为主


根据以上分析，改进建议， 请直接修改 `atom.py` 文件，并提供diff。
要求：清晰、精确、易于理解，在保持质量的同时，尽可能简洁，不要有各种“黑话”和比喻，最好以关键词为主


改进 这段提示词
要求：清晰、精确、易于理解，在保持质量的同时，尽可能简洁，不要有各种“黑话”和比喻，最好以关键词为主


你的输出被截断了，请从截断的地方继续
"""

ATOMIC_JUDGMENT_RULES = """
# 原子任务判定规则

## 判定为 complex (需要分解) 的条件 (满足任一即可)
1.  设计缺失: 核心信息（如人物、情节、设定）缺失或模糊，需要先进行设计。
    - 示例: 任务是“主角与新登场的女主角相遇”，但`上下文`中完全没有关于女主角的任何设定。
2.  目标复合: 任务包含多个独立场景、复杂互动或情节转折。
    - 示例: “主角从A城出发，途中遭遇劫匪并反杀，最终抵达B城见到故人。” (包含至少三个场景和一次情节转折)
3.  权重过高: 任务是关键情节（如转折点、核心关系变化、悬念揭晓、重要“名场面”）。
    - 示例: “揭晓主角的真实身世，颠覆其现有认知。”
4.  篇幅过长: 预计产出篇幅显著超过 2000 字。

## 判定为 atomic (无需分解) 的条件
- 不满足任何 complex 条件。
- 任务通常是目标单一、情节连续、篇幅适中（≤ 2000字）的常规写作。
    - 示例 (目标单一): "描写主角在擂台赛上战胜对手的战斗场景。"
    - 示例 (情节连续): "描写主角获得金手指后的狂喜与初步尝试。"
    - 反例 (看似复合但实为单一): "主角与反派在宴会厅对峙，通过对话交锋，最终不欢而散。" (虽然有互动，但场景单一，目标是“完成一次交锋”，应为 atomic)
""".strip()


CONTENT_TEMPLATE = """
# 当前待评估任务
{to_run_task}


# 上下文

## 同级设计
- 与当前任务平级的相关设计，最终方案需与之协同。
<same_graph_dependent>
{to_run_same_graph_dependent}
</same_graph_dependent>

## 整体规划
- 当前任务在整体规划中的位置。
{to_run_full_plan}

## 上级设计
- 必须严格遵守的上级设计。
<outer_graph_dependent>
{to_run_outer_graph_dependent}
</outer_graph_dependent>

## 最新情节
- 最终方案必须从此无缝衔接。
{to_run_article_latest}

## 相关历史情节
- 这是从记忆库中检索出的、与你当前任务最相关的历史情节片段。
{to_run_mem0_content}
""".strip()


###############################################################################


@prompt_register.register_module()
class StoryAtomZh(PromptTemplate):
    def __init__(self) -> None:
        system_message = f"""
# 角色
你是小说写作规划系统中的`原子任务判定代理`。

你的职责是：评估一个写作任务是否需要进一步分解。


{ATOMIC_JUDGMENT_RULES}


# 任务
- 遵循`原子任务判定规则`，对用户输入中的`当前待评估任务`进行判定。


# 输出格式
- 严格按照以下格式输出，不要有任何额外解释。
<result>
<atomic_task_determination>
atomic/complex
</atomic_task_determination>
</result>
""".strip()

        super().__init__(system_message, CONTENT_TEMPLATE)


###############################################################################


@prompt_register.register_module()
class StoryAtomUpdateZh(PromptTemplate):
    def __init__(self) -> None:
        system_message = f"""
# 角色
你是小说写作规划系统中的`目标更新与原子任务判定代理`。

# 职责
1.  更新目标: 结合`上下文`，优化`当前待评估任务`，使其更具体、可执行。若无需优化，则使用原始目标。
2.  判定任务: 基于更新后的目标，根据`原子任务判定规则`评估其是否为 `atomic` 或 `complex`。


{ATOMIC_JUDGMENT_RULES}


# 任务与输出
严格按照以下步骤和格式执行，不要有任何额外解释。

1.  更新目标: 依据`上下文`（特别是`上级设计`和`同级设计`），优化`当前待评估任务`。
    - 输出到: `<goal_updating>`

2.  判定任务: 对更新后的目标进行判定。
    - 输出到: `<atomic_task_determination>`

<result>
<goal_updating>
优化后的目标描述；如无需优化则输出原始目标
</goal_updating>
<atomic_task_determination>
atomic/complex
</atomic_task_determination>
</result>
""".strip()

        super().__init__(system_message, CONTENT_TEMPLATE)


###############################################################################


"""
# StoryWriterZh  初版的提示词：
```
# 摘要与介绍
你是递归式专业小说写作规划系统中的原子写作任务判定代理：

在整体计划和已完成小说内容的背景下，评估给定的写作任务是否为原子任务，即无需进一步规划的任务。根据叙事理论和故事写作的结构安排，一个写作任务可以被进一步分解为更细致的写作子任务和设计子任务。写作任务涉及具体文本部分的实际创作，而设计任务可能包括设计核心冲突、人物设定、大纲及详细大纲、关键情节节点、故事背景、情节元素等，以支持实际写作。

# 原子任务判定规则
依次独立判定以下两类子任务是否需要分解：

1. 设计子任务：如果写作需要特定的设计作为支撑，且这些设计需求未由依赖的设计任务或已完成的小说内容提供，那么就需要规划一个设计子任务。

2. 写作子任务：如果其篇幅等于或少于500字，则无需进一步规划额外的写作子任务。

如果需要创建设计子任务或写作子任务中的任何一种，该任务就被视为复杂任务。
```
"""


###############################################################################


"""
# StoryAtomUpdateZh  初版的提示词：
```
# 摘要与介绍
你是递归式专业小说写作规划系统中的目标更新与原子写作任务判定代理：

1. 目标更新：根据整体计划、已完成的小说内容以及现有的设计结论，按需更新或修订当前的写作任务要求，使其更贴合需求、合理且详细。例如，依据设计结论提供更具体的要求，或删除已完成小说内容中的冗余信息。

2. 原子写作任务判定：在整体计划和已完成小说内容的背景下，评估给定的写作任务是否为原子任务，即无需进一步规划的任务。根据叙事理论和故事写作的结构安排，一个写作任务可以被进一步分解为更细致的写作子任务和设计子任务。写作任务涉及具体文本部分的实际创作，而设计任务可能包括设计核心冲突、人物设定、大纲及详细大纲、关键情节节点、故事背景、情节元素等，以支持实际写作。

# 目标更新提示
- 根据整体计划、已完成的小说内容以及现有的设计结论，按需更新或修订当前的写作任务要求，使其更贴合需求、合理且详细。例如，依据设计结论提供更具体的要求，或删除已完成小说内容中的冗余信息。
- 直接输出更新后的目标。若无需更新，则输出原始目标。

# 原子任务判定规则
依次独立判定以下两类子任务是否需要分解：

1. 设计子任务：如果写作需要特定的设计作为支撑，且这些设计需求未由依赖的设计任务或已完成的小说内容提供，那么就需要规划一个设计子任务。

2. 写作子任务：如果其篇幅等于或少于500字，则无需进一步规划额外的写作子任务。

如果需要创建设计子任务或写作子任务中的任何一种，该任务就被视为复杂任务。
```
"""
